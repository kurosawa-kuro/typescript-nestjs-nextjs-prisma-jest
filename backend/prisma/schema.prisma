// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー関連モデル
model User {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  password         String
  avatarPath       String        @default("default_avatar.png")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  microposts       Micropost[]
  userRoles        UserRole[]
  followers        Follow[]      @relation("Followers")
  following        Follow[]      @relation("Following")
  teamMemberships  TeamMember[]
  profile          UserProfile?
  comments         Comment[]
  likes            Like[]
}

model UserProfile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  bio         String?
  location    String?
  website     String?
  birthDate   DateTime?
  user        User     @relation(fields: [userId], references: [id])
}


model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]
}

model Follow {
  followerId  Int
  followedId  Int
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followed    User     @relation("Followers", fields: [followedId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

// 役割関連モデル
model UserRole {
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

// チーム関連モデル
model Team {
  id        Int          @id @default(autoincrement())
  name      String
  isPrivate Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]

  @@index([name])
}

model TeamMember {
  userId   Int
  teamId   Int
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

// 投稿関連モデル
model Micropost {
  id         Int                 @id @default(autoincrement())
  userId     Int
  title      String
  imagePath  String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories MicropostCategory[]
  comments   Comment[]
  likes      Like[]
  hashtags   HashtagMicropost[]
}

model Category {
  id         Int                 @id @default(autoincrement())
  title      String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  microposts MicropostCategory[]
}

model MicropostCategory {
  micropostId Int
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  micropost   Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([micropostId, categoryId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  userId     Int
  micropostId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)
}

model Like {
  id         Int       @id @default(autoincrement())
  userId     Int
  micropostId Int
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)

  @@unique([userId, micropostId])
}

model Hashtag {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  microposts HashtagMicropost[]
}

model HashtagMicropost {
  hashtagId   Int
  micropostId Int
  hashtag     Hashtag   @relation(fields: [hashtagId], references: [id])
  micropost   Micropost @relation(fields: [micropostId], references: [id])

  @@id([hashtagId, micropostId])
}
