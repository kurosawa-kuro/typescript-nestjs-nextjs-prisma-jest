// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー関連モデル（必須）
model User {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  password         String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  profile          UserProfile?
  role             Role          @relation(fields: [roleId], references: [id])
  roleId           Int
  avatarPath       String        @default("default_avatar.png")
  // 以下は任意の関連
  microposts       Micropost[]
  followers        Follow[]      @relation("Followers")
  following        Follow[]      @relation("Following")
  teamMemberships  TeamMember[]
  comments         Comment[]
  likes            Like[]
  userSkills       UserSkill[]
  careers          Career[]
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  avatarPath  String    @default("default_avatar.png")
  bio         String?
  location    String?
  website     String?
  birthDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

// 以下は任意のモデル
model Follow {
  followerId  Int
  followedId  Int
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followed    User     @relation("Followers", fields: [followedId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  isPrivate Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]

  @@index([name])
}

model TeamMember {
  userId   Int
  teamId   Int
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

// 投稿関連モデル
model Micropost {
  id         Int                 @id @default(autoincrement())
  userId     Int
  title      String
  imagePath  String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likes      Like[]
  hashtags   HashtagMicropost[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  userId     Int
  micropostId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)
}

model Like {
  id         Int       @id @default(autoincrement())
  userId     Int
  micropostId Int
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)

  @@unique([userId, micropostId])
}

model Hashtag {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  microposts HashtagMicropost[]
}

model HashtagMicropost {
  hashtagId   Int
  micropostId Int
  hashtag     Hashtag   @relation(fields: [hashtagId], references: [id])
  micropost   Micropost @relation(fields: [micropostId], references: [id])

  @@id([hashtagId, micropostId])
}

// スキルマスター
model Skill {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  category        String        // 言語, フレームワーク, インフラ, ツール等
  description     String?       @db.Text
  isPopular       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userSkills      UserSkill[]
  careerSkills    CareerSkill[]
}

// ユーザースキル管理
model UserSkill {
  id              Int       @id @default(autoincrement())
  userId          Int
  skillId         Int
  experienceYears Float     // 経験年数
  level           Int       // 1-5などのスキルレベル
  lastUsedAt      DateTime? // 最終使用日
  isMain          Boolean   @default(false) // メインスキルかどうか
  description     String?   @db.Text  // 具体的な経験の説明
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill           Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
}

// 職歴
model Career {
  id              Int           @id @default(autoincrement())
  userId          Int
  companyName     String
  department      String?       // 部署
  position        String        // 役職
  employmentType  String        // 正社員, 契約社員, フリーランス等
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean       @default(false)
  description     String        @db.Text // 業務内容
  achievements    String?       @db.Text // 成果・実績
  teamSize        Int?          // チーム規模
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills          CareerSkill[] // 使用したスキル
  projects        CareerProject[] // 携わったプロジェクト

  @@index([userId])
}

// 職歴で使用したスキル
model CareerSkill {
  id              Int       @id @default(autoincrement())
  careerId        Int
  skillId         Int
  level           Int?      // スキルの活用レベル
  description     String?   @db.Text // スキルの具体的な活用方法
  career          Career    @relation(fields: [careerId], references: [id], onDelete: Cascade)
  skill           Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([careerId, skillId])
  @@index([careerId])
  @@index([skillId])
}

// プロジェクト経験
model CareerProject {
  id              Int       @id @default(autoincrement())
  careerId        Int
  name            String
  description     String    @db.Text
  role            String    // プロジェクトでの役割
  responsibilities String?  @db.Text // 担当業務
  startDate       DateTime
  endDate         DateTime?
  teamSize        Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  career          Career    @relation(fields: [careerId], references: [id], onDelete: Cascade)

  @@index([careerId])
}
