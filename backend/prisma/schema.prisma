// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement()) // ユーザーの一意識別子
  name          String      // ユーザーの表示名
  email         String      @unique // ユーザーのメールアドレス（一意）
  password      String      // ハッシュ化されたパスワード
  avatarPath    String      @default("default_avatar.png") // プロフィール画像のパス
  microposts    Micropost[] // ユーザーの投稿一覧
  userRoles     UserRole[]  // ユーザーの役割一覧
  followers     Follow[]    @relation("Followers") // このユーザーをフォローしているユーザー一覧
  following     Follow[]    @relation("Following") // このユーザーがフォローしているユーザー一覧
  createdAt     DateTime    @default(now()) // アカウント作成日時
  updatedAt     DateTime    @updatedAt // アカウント更新日時
}

model Follow {
  followerId  Int      // フォローするユーザーのID
  followedId  Int      // フォローされるユーザーのID
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade) // フォローする側のユーザー
  followed    User     @relation("Followers", fields: [followedId], references: [id], onDelete: Cascade) // フォローされる側のユーザー
  createdAt   DateTime @default(now()) // フォロー関係が作成された日時

  @@id([followerId, followedId]) // フォロー関係の一意性を保証する複合主キー
  @@index([followerId]) // フォローしているユーザーの検索を最適化
  @@index([followedId]) // フォロワーの検索を最適化
}

model Micropost {
  id         Int                @id @default(autoincrement()) // 投稿の一意識別子
  userId     Int                // 投稿者のユーザーID
  title      String            // 投稿のタイトル
  imagePath  String?           // 投稿に添付された画像のパス（オプション）
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade) // 投稿者との関連
  categories MicropostCategory[] // 投稿に関連付けられたカテゴリー一覧
  createdAt  DateTime          @default(now()) // 投稿作成日時
  updatedAt  DateTime          @updatedAt // 投稿更新日時
}

model Category {
  id         Int                @id @default(autoincrement()) // カテゴリーの一意識別子
  title      String            // カテゴリーの名前
  microposts MicropostCategory[] // このカテゴリーに属する投稿一覧
  createdAt  DateTime          @default(now()) // カテゴリー作成日時
  updatedAt  DateTime          @updatedAt // カテゴリー更新日時
}

model MicropostCategory {
  micropostId Int       // 投稿ID
  categoryId  Int       // カテゴリーID
  micropost   Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade) // 関連する投稿
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade) // 関連するカテゴリー

  @@id([micropostId, categoryId]) // 投稿とカテゴリーの関連の一意性を保証する複合主キー
  createdAt DateTime @default(now()) // 関連付け作成日時
  updatedAt DateTime @updatedAt // 関連付け更新日時
}

model Role {
  id          Int        @id @default(autoincrement()) // 役割の一意識別子
  name        String     @unique // 役割の名前（一意）
  description String?    // 役割の説明（オプション）
  userRoles   UserRole[] // この役割を持つユーザー一覧
  createdAt   DateTime   @default(now()) // 役割作成日時
  updatedAt   DateTime   @updatedAt // 役割更新日時
}

model UserRole {
  userId     Int      // ユーザーID
  roleId     Int      // 役割ID
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // 関連するユーザー
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade) // 関連する役割
  assignedAt DateTime @default(now()) // 役割が割り当てられた日時

  @@id([userId, roleId]) // ユーザーと役割の関連の一意性を保証する複合主キー
}