// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー関連モデル
model User {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  password         String
  roleId           Int
  avatarPath       String        @default("default_avatar.png")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  profile          UserProfile?
  role             Role          @relation(fields: [roleId], references: [id])
  microposts       Micropost[]
  followers        Follow[]      @relation("Followers")
  following        Follow[]      @relation("Following")
  teamMemberships  TeamMember[]
  comments         Comment[]
  likes            Like[]
  skills           UserSkill[]
  careers          Career[]
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  avatarPath  String    @default("default_avatar.png")
  bio         String?
  location    String?
  website     String?
  birthDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

// チーム関連モデル
model Team {
  id        Int          @id @default(autoincrement())
  name      String
  isPrivate Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]

  @@index([name])
}

model TeamMember {
  userId   Int
  teamId   Int
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

// 投稿関連モデル
model Micropost {
  id         Int                 @id @default(autoincrement())
  userId     Int
  title      String
  imagePath  String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likes      Like[]
  hashtags   HashtagMicropost[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  userId     Int
  micropostId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)
}

model Like {
  id         Int       @id @default(autoincrement())
  userId     Int
  micropostId Int
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  micropost  Micropost @relation(fields: [micropostId], references: [id], onDelete: Cascade)

  @@unique([userId, micropostId])
}

model Hashtag {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  microposts HashtagMicropost[]
}

model HashtagMicropost {
  hashtagId   Int
  micropostId Int
  hashtag     Hashtag   @relation(fields: [hashtagId], references: [id])
  micropost   Micropost @relation(fields: [micropostId], references: [id])

  @@id([hashtagId, micropostId])
}

// スキル関連モデル
model Skill {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  category        String
  description     String?       @db.Text
  isPopular       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userSkills      UserSkill[]
  careerSkills    CareerSkill[]
}

model UserSkill {
  id              Int       @id @default(autoincrement())
  userId          Int
  skillId         Int
  experienceYears Float
  level           Int
  lastUsedAt      DateTime?
  isMain          Boolean   @default(false)
  description     String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill           Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
}

// キャリア関連モデル
model Career {
  id              Int             @id @default(autoincrement())
  userId          Int
  companyName     String
  department      String?
  position        String
  employmentType  String
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean         @default(false)
  description     String          @db.Text
  achievements    String?         @db.Text
  teamSize        Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills          CareerSkill[]
  projects        CareerProject[]

  @@index([userId])
}

model CareerSkill {
  id              Int       @id @default(autoincrement())
  careerId        Int
  skillId         Int
  level           Int?      // スキルの活用レベル
  description     String?   @db.Text // スキルの具体的な活用方法
  career          Career    @relation(fields: [careerId], references: [id], onDelete: Cascade)
  skill           Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([careerId, skillId])
  @@index([careerId])
  @@index([skillId])
}

model CareerProject {
  id              Int       @id @default(autoincrement())
  careerId        Int
  name            String
  description     String    @db.Text
  role            String    // プロジェクトでの役割
  responsibilities String?  @db.Text // 担当業務
  startDate       DateTime
  endDate         DateTime?
  teamSize        Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  career          Career    @relation(fields: [careerId], references: [id], onDelete: Cascade)

  @@index([careerId])
}
